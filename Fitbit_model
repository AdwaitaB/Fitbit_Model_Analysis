


import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
import os
print(os.listdir('/kaggle/input/fitbit-data-analysis'))

data = pd.read_csv('/kaggle/input/fitbit-data-analysis/Activity (NR).csv')

print(data.head())
print(data.tail())

data.head()

condition = (data == 0).sum(axis=1)>=2
data_cleaned = data[~condition]

data['CaloriesBurned'] = data["TotalDistance"].astype(float)* 60 + data["TotalActiveHours"].astype(float)*100 - data["SedentaryHours"].astype(float)*30

print(data.columns)
print(data_cleaned)

features = ['TotalDistance', 'TotalActiveHours', 'SedentaryHours']
target = ['CaloriesBurned']

x= data[features]
y= data[target]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=42)

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

model = LinearRegression()
model.fit(x_train_scaled, y_train) 

y_pred = model.predict(x_test_scaled)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)


print(f"Mean Absolute Error: {mae:.2f}")
print(f"Mean Squared Error: {mse:.2f}")

sample_input = pd.DataFrame([[10, 5, 12]], columns=["TotalDistance", "TotalActiveHours", "SedentaryHours"]) # Example: 10 km distance, 5 active hours, 12 sedentary hours
sample_input_scaled = scaler.transform(sample_input)
predicted_calories = model.predict(sample_input_scaled)

print(f"Predicted Calories Burned: {predicted_calories[0][0]:.2f}")
